// ESBuild È´òÁ∫ßÈÖçÁΩÆÁ§∫‰æã
// Â±ïÁ§∫Áîü‰∫ßÁéØÂ¢É‰ºòÂåñÂíåÈ´òÁ∫ßÁâπÊÄß

import { build } from 'esbuild';
import { fileSizePlugin } from './plugins/file-size-plugin.js';

// Áîü‰∫ßÁéØÂ¢ÉÈÖçÁΩÆ
export const productionConfig = {
  entryPoints: {
    'main': 'src/index.js',
    'react': 'src/react-app.jsx',
    'app': 'src/app.ts'
  },
  
  // ËæìÂá∫ÈÖçÁΩÆ
  outdir: 'dist/production',
  format: 'esm',
  platform: 'browser',
  target: ['es2020', 'chrome80', 'firefox80', 'safari14'],
  
  // ‰ºòÂåñÈÄâÈ°π
  bundle: true,
  minify: true,
  treeShaking: true,
  splitting: true,      // ‰ª£Á†ÅÂàÜÂâ≤
  chunkNames: 'chunks/[name]-[hash]',
  assetNames: 'assets/[name]-[hash]',
  
  // Source map
  sourcemap: 'external',
  sourcesContent: false,
  
  // ‰ª£Á†ÅËΩ¨Êç¢
  jsx: 'automatic',
  jsxImportSource: 'react',
  
  // Ë∑ØÂæÑËß£Êûê
  resolveExtensions: ['.tsx', '.ts', '.jsx', '.js', '.css', '.json'],
  conditions: ['import', 'module', 'browser', 'default'],
  mainFields: ['browser', 'module', 'main'],
  
  // Â§ñÈÉ®‰æùËµñÔºà‰∏çÊâìÂåÖÁöÑÂ∫ìÔºâ
  external: [],
  
  // Êñá‰ª∂Âä†ËΩΩÂô®
  loader: {
    '.png': 'file',
    '.jpg': 'file',
    '.jpeg': 'file',
    '.gif': 'file',
    '.svg': 'dataurl',
    '.woff': 'file',
    '.woff2': 'file',
    '.ttf': 'file',
    '.eot': 'file'
  },
  
  // ÂÆö‰πâÊõøÊç¢
  define: {
    'process.env.NODE_ENV': '"production"',
    'process.env.BUILD_TYPE': '"production"',
    'DEBUG': 'false',
    'VERSION': '"1.0.0"'
  },
  
  // ÂéãÁº©ÈÄâÈ°π
  minifyWhitespace: true,
  minifyIdentifiers: true,
  minifySyntax: true,
  
  // ÂÖ∂‰ªñÈÄâÈ°π
  charset: 'utf8',
  tsconfigRaw: {
    compilerOptions: {
      useDefineForClassFields: false,
    }
  },
  
  // Êèí‰ª∂
  plugins: [
    fileSizePlugin({
      reportPath: 'dist/production/build-report.json',
      threshold: 200 * 1024 // 200KB
    })
  ],
  
  // ÊÄßËÉΩÈ¢ÑÁÆó
  metafile: true,
  write: true,
  
  // Êó•ÂøóÈÖçÁΩÆ
  logLevel: 'info',
  color: true
};

// ÂºÄÂèëÁéØÂ¢ÉÈÖçÁΩÆ
export const developmentConfig = {
  ...productionConfig,
  
  // ÂºÄÂèëÁâπÂÆöËÆæÁΩÆ
  outdir: 'dist/development',
  minify: false,
  splitting: false,
  sourcemap: 'inline',
  sourcesContent: true,
  keepNames: true,
  
  // ÂºÄÂèë‰ºòÂåñ
  treeShaking: false,
  
  define: {
    'process.env.NODE_ENV': '"development"',
    'process.env.BUILD_TYPE': '"development"',
    'DEBUG': 'true',
    'VERSION': '"1.0.0-dev"'
  },
  
  // ÂºÄÂèëÊó•Âøó
  logLevel: 'debug'
};

// Node.js ÁéØÂ¢ÉÈÖçÁΩÆ
export const nodeConfig = {
  entryPoints: ['src/app.ts'],
  outfile: 'dist/node/app.js',
  platform: 'node',
  format: 'esm',
  target: 'node18',
  
  bundle: true,
  minify: false,
  sourcemap: true,
  
  // Node.js Â§ñÈÉ®Ê®°Âùó
  external: [
    'fs',
    'path', 
    'crypto',
    'util',
    'events',
    'stream',
    'buffer',
    'url',
    'querystring'
  ],
  
  // Node.js ÁâπÂÆöËÆæÁΩÆ
  conditions: ['node', 'import'],
  mainFields: ['module', 'main'],
  
  define: {
    'process.env.NODE_ENV': '"production"',
    'global': 'globalThis'
  }
};

// Â∫ìÊâìÂåÖÈÖçÁΩÆ
export const libraryConfig = {
  entryPoints: ['src/utils/math.js'],
  outdir: 'dist/lib',
  
  // Â§öÊ†ºÂºèËæìÂá∫
  format: 'esm',
  
  bundle: true,
  minify: true,
  sourcemap: true,
  
  // Â∫ìÁâπÂÆöËÆæÁΩÆ
  globalName: 'ESBuildUtils',
  
  // Â§ñÈÉ®ÂåñÊâÄÊúâ‰æùËµñ
  external: ['*'],
  
  // ‰øùÊåÅÂØºÂá∫ÂêçÁß∞
  keepNames: true,
  
  target: ['es2020', 'node14']
};

// ÊûÑÂª∫ÂáΩÊï∞
export async function buildProduction() {
  console.log('üèóÔ∏è ÂºÄÂßãÁîü‰∫ßÁéØÂ¢ÉÊûÑÂª∫...');
  const startTime = Date.now();
  
  try {
    const result = await build(productionConfig);
    const buildTime = Date.now() - startTime;
    
    console.log(`‚úÖ Áîü‰∫ßÊûÑÂª∫ÂÆåÊàêÔºÅËÄóÊó∂: ${buildTime}ms`);
    
    if (result.metafile) {
      analyzeBundle(result.metafile, 'production');
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Áîü‰∫ßÊûÑÂª∫Â§±Ë¥•:', error);
    throw error;
  }
}

export async function buildDevelopment() {
  console.log('üîß ÂºÄÂßãÂºÄÂèëÁéØÂ¢ÉÊûÑÂª∫...');
  const startTime = Date.now();
  
  try {
    const result = await build(developmentConfig);
    const buildTime = Date.now() - startTime;
    
    console.log(`‚úÖ ÂºÄÂèëÊûÑÂª∫ÂÆåÊàêÔºÅËÄóÊó∂: ${buildTime}ms`);
    
    return result;
  } catch (error) {
    console.error('‚ùå ÂºÄÂèëÊûÑÂª∫Â§±Ë¥•:', error);
    throw error;
  }
}

export async function buildNode() {
  console.log('üü¢ ÂºÄÂßã Node.js ÊûÑÂª∫...');
  const startTime = Date.now();
  
  try {
    const result = await build(nodeConfig);
    const buildTime = Date.now() - startTime;
    
    console.log(`‚úÖ Node.js ÊûÑÂª∫ÂÆåÊàêÔºÅËÄóÊó∂: ${buildTime}ms`);
    
    return result;
  } catch (error) {
    console.error('‚ùå Node.js ÊûÑÂª∫Â§±Ë¥•:', error);
    throw error;
  }
}

export async function buildLibrary() {
  console.log('üìö ÂºÄÂßãÂ∫ìÊûÑÂª∫...');
  const startTime = Date.now();
  
  try {
    const result = await build(libraryConfig);
    const buildTime = Date.now() - startTime;
    
    console.log(`‚úÖ Â∫ìÊûÑÂª∫ÂÆåÊàêÔºÅËÄóÊó∂: ${buildTime}ms`);
    
    return result;
  } catch (error) {
    console.error('‚ùå Â∫ìÊûÑÂª∫Â§±Ë¥•:', error);
    throw error;
  }
}

// ÊâπÈáèÊûÑÂª∫
export async function buildAll() {
  console.log('üöÄ ÂºÄÂßãÊâπÈáèÊûÑÂª∫...\n');
  
  const results = [];
  
  try {
    results.push({
      name: 'Production',
      result: await buildProduction()
    });
    
    results.push({
      name: 'Development', 
      result: await buildDevelopment()
    });
    
    results.push({
      name: 'Node.js',
      result: await buildNode()
    });
    
    results.push({
      name: 'Library',
      result: await buildLibrary()
    });
    
    console.log('\nüìä ÊûÑÂª∫Ê±áÊÄª:');
    results.forEach(({ name, result }) => {
      if (result.metafile) {
        const outputs = Object.keys(result.metafile.outputs);
        console.log(`   ${name}: ${outputs.length} ‰∏™Êñá‰ª∂`);
      }
    });
    
    console.log('\n‚úÖ ÊâÄÊúâÊûÑÂª∫ÂÆåÊàêÔºÅ');
    
  } catch (error) {
    console.error('‚ùå ÊâπÈáèÊûÑÂª∫Â§±Ë¥•:', error);
    throw error;
  }
}

// ÊûÑÂª∫ÂàÜÊûê
function analyzeBundle(metafile, env) {
  const outputs = metafile.outputs;
  const totalSize = Object.values(outputs).reduce((sum, output) => sum + output.bytes, 0);
  
  console.log(`\nüìà ${env} ÊûÑÂª∫ÂàÜÊûê:`);
  console.log(`   ÊÄªÂ§ßÂ∞è: ${formatBytes(totalSize)}`);
  console.log(`   Êñá‰ª∂Êï∞: ${Object.keys(outputs).length}`);
  
  // ÊòæÁ§∫ÊúÄÂ§ßÁöÑÂá†‰∏™Êñá‰ª∂
  const sortedOutputs = Object.entries(outputs)
    .map(([file, info]) => ({ file, size: info.bytes }))
    .sort((a, b) => b.size - a.size)
    .slice(0, 3);
  
  console.log('   ÊúÄÂ§ßÊñá‰ª∂:');
  sortedOutputs.forEach(({ file, size }) => {
    console.log(`     ${file.replace(/^dist\/[^/]+\//, '')}: ${formatBytes(size)}`);
  });
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂
if (import.meta.url === `file://${process.argv[1]}`) {
  const command = process.argv[2] || 'all';
  
  switch (command) {
    case 'prod':
    case 'production':
      buildProduction();
      break;
    case 'dev':
    case 'development':
      buildDevelopment();
      break;
    case 'node':
      buildNode();
      break;
    case 'lib':
    case 'library':
      buildLibrary();
      break;
    case 'all':
    default:
      buildAll();
      break;
  }
}
